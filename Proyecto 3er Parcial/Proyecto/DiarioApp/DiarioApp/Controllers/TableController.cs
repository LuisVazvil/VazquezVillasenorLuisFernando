// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using DiarioApp.Controllers;
using DiarioApp.Models;
using Firebase.Core;
using Firebase.Database;
using Foundation;
using UIKit;

namespace DiarioApp
{
    public partial class TableController : UIViewController
    {
        //Referencia de base datos FireBase
        DatabaseReference rootNode;
        List<Dia> diarios;
        List<Dia> diariosBuscar;

        public TableController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            InitialComponent();
            // Perform any additional setup after loading the view, typically from a nib.



        }

        void InitialComponent()
        {
            rootNode = Database.DefaultInstance.GetRootReference();
            DatabaseReference userNode = rootNode.GetChild("users").GetChild(AppDelegate.UserUid);
            //traerDatos();



            diarios = new List<Dia>();
            diarios.Clear();
            tableList.Dispose();
            tableList.ReloadData();
            DatabaseReference foldersNode = rootNode.GetChild("users").GetChild(AppDelegate.UserUid);
            nuint handleReference = foldersNode.ObserveEvent(DataEventType.Value, (snapshot) =>
            {
                if (snapshot.ChildrenCount != 0)
                {
                    var folderData = snapshot.GetValue<NSDictionary>();
                    // Do magic with the folder data
                    int h = (int)folderData.Count;
                    var g = folderData.Values;

                    for (int i = 0; i < g.Length; i++)
                    {
                        Dia dia1 = new Dia();

                        var e = g[i].ValueForKey((NSString)"Estatus").ToString();

                        if (e.Equals("1"))
                        {

                            dia1.Fecha = g[i].ValueForKey((NSString)"Fecha").ToString();
                            dia1.Descripcion = g[i].ValueForKey((NSString)"Descripcion").ToString();
                            dia1.Emocion = g[i].ValueForKey((NSString)"Emocion").ToString();
                            dia1.Foto = g[i].ValueForKey((NSString)"Foto").ToString();
                            dia1.Titulo = g[i].ValueForKey((NSString)"Titulo").ToString();


                            diarios.Add(dia1);
                            var dt = diarios.Count;
                        }
                    }

                    tableList.Source = new TablaSource(diarios);
                    Add(tableList);
                }
            });
        }

        //Filtro de emociones
        partial void btnCalendario(NSObject sender)
        {
            var alert = UIAlertController.Create(null, null, UIAlertControllerStyle.ActionSheet);
            alert.AddAction(UIAlertAction.Create("Emocionante", UIAlertActionStyle.Default, action => BuscarEmocion("Emocionante")));
            alert.AddAction(UIAlertAction.Create("Divertido", UIAlertActionStyle.Default, action => BuscarEmocion("Divertido")));
            alert.AddAction(UIAlertAction.Create("Triste", UIAlertActionStyle.Default, action => BuscarEmocion("Triste")));
            alert.AddAction(UIAlertAction.Create("Estresante", UIAlertActionStyle.Default, action => BuscarEmocion("Estresante")));
            alert.AddAction(UIAlertAction.Create("Alegre", UIAlertActionStyle.Default, action => BuscarEmocion("Alegre")));
            alert.AddAction(UIAlertAction.Create("Cansado", UIAlertActionStyle.Default, action => BuscarEmocion("Cansado")));
            alert.AddAction(UIAlertAction.Create("Indiferente", UIAlertActionStyle.Default, action => BuscarEmocion("Indiferente")));
            alert.AddAction(UIAlertAction.Create("Todos", UIAlertActionStyle.Default, action => BuscarEmocion("Todos")));

            PresentViewController(alert, animated: true, completionHandler: null);
        }


        public void BuscarEmocion(string emo)
        {
            diariosBuscar = new List<Dia>();
            if(emo.Equals("Todos"))
            {
                tableList.Dispose();
                tableList.Source = new TablaSource(diarios);
                Add(tableList);
                tableList.ReloadData();
            }
            else
            {
                for (int i = 0; i < diarios.Count; i++)
                {
                    if(emo.Equals(diarios[i].Emocion))
                    {
                        Dia de = diarios[i];
                        diariosBuscar.Add(de);
                        tableList.Dispose();
                        tableList.Source = new TablaSource(diariosBuscar);
                        Add(tableList);
                        tableList.ReloadData();
                    }
                }

                if(diariosBuscar.Count == 0)
                {
                    tableList.Dispose();
                    tableList.Source = new TablaSource(diariosBuscar);
                    Add(tableList);
                    tableList.ReloadData();
                }
            }
        }

        #region Navigation

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            if (segue.Identifier != "DefaultSegue")
                return;

            var a  = tableList.IndexPathForSelectedRow.Row;
            var d = diarios[a];
            (segue.DestinationViewController as ModificarDiaController).diaM = d;

            diarios.Clear();
            //tableList.Dispose();
            //tableList.ReloadData();
            //InitialComponent();

        }

        #endregion
    }
}
